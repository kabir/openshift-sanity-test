name: Run Tests
env:
  STATUS_BRANCH: run-status
on:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-cloud-tests-run]
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Output
        env:
          #MESSAGE: ${{ github.event.client_payload.message }}
          MESSAGE: ${{ toJSON(github.event.client_payload) }}
        run: echo $MESSAGE
      
      - name: Checkout run-status branch
        uses: actions/checkout@v2
        with:
          ref: ${{ env.STATUS_BRANCH }}
          path: status      
          
      - name: Determine type
        run: |
          number=$RANDOM
          echo $number
          if [ $((number%2)) -eq 0 ] ; then   
            echo "failing job"
            exit 1
          else
            echo "passing job"
          fi
          
      - name: Report failure
        if: ${{ failure() }}
        run: |
          echo "It failed"
          STATUS="failed"
          echo "STATUS=${STATUS}" >> $GITHUB_ENV

          
      - name: Report success
        if: ${{ success() }}
        working-directory: status
        run: |
          echo "It passed"
          STATUS="passed"
          echo "STATUS=${STATUS}" >> $GITHUB_ENV
          
#       - name: Report back
#         if: ${{ always() }}
#         env:
#           TRIGGER_REPO: ${{  github.event.client_payload.triggerRepo }}
#           REMOTE_RUN_ID: ${{ github.event.client_payload.triggerWorkflowRunId }}
#           INPUT_TOKEN: ${{ secrets.REMOTE_DISPATCH_TOKEN }}
#           INPUT_EVENT_TYPE: report-cloud-tests-run-status
#         run: |
#           echo "Reporting back. Status: $STATUS"
#           RUN_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
#           TEXT="The remote job $STATUS_TEXT.\n\nFurther details can be found at $RUN_URL".
          
#           INPUT_CLIENT_PAYLOAD=$( jq -n \
#                   --arg s "$STATUS" \
#                   --arg m "$TEXT" \
#                   --arg orid "$GITHUB_RUN_ID" \
#                   '{status: $s, message: $m, originalId: $orid}' )
                  

#           resp=$(curl -X POST -s "https://api.github.com/repos/${TRIGGER_REPO}/dispatches" \
#               -H "Accept: application/vnd.github.v3+json" \
#               -H "Content-Type: application/json" \
#               -H "Authorization: Bearer ${INPUT_TOKEN}" \
#               -d "{\"event_type\": \"${INPUT_EVENT_TYPE}\", \"client_payload\": ${INPUT_CLIENT_PAYLOAD} }")
#           if [ -z "$resp" ]
#           then
#             sleep 2
#           else
#             echo "Workflow failed to trigger"
#             echo "$resp"
#             exit 1
#           fi

          
      - name: Add run status commit
        if: ${{ always() }}
        env:
          TRIGGER_REPO: ${{  github.event.client_payload.triggerRepo }}
          STATUS_FILE: ${{ github.event.client_payload.statusFile }}
        run: |
          echo "Reporting back. Status: $STATUS"
          RUN_URL="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          TEXT="The remote job $STATUS. Further details can be found at $RUN_URL".
          
          COMMIT_TEXT=$( jq -n \
                  --arg s "$STATUS" \
                  --arg m "$TEXT" \
                  --arg orid "$GITHUB_RUN_ID" \
                  '{status: $s, message: $m, originalId: $orid}' )
          
          
          echo "${COMMIT_TEXT}" > "${STATUS_FILE}"
          # git status
          git config --local user.name "CI Action"
          git config --local user.email "ci@example.com"
          git add -A 
          # git status
          git commit -m "Committing status for ${TRIGGER_REPO} ${FILENAME}"
          # git status

          i=0
          echo "Committed. Attempting to push"
          git push origin ${STATUS_BRANCH}
          RESULT=$?
          echo "result ${RESULT}"
          while [[ "${RESULT}" != '0' ]]
          do
            # Generate random sleep time between 15 and 45 seconds
            wait=$[ $RANDOM % 45 + 15 ]
            echo "Sleeping $wait seconds"
            sleep $wait
            i=$((i+1))
            if [[ "$i" == '10' ]]; then
              echo "Too many failures trying to push. Giving up."
            fi
          
          
            echo "Push failed. Trying to fetch, rebase and push again..."
            git fetch origin ${STATUS_BRANCH}
            git rebase origin/${STATUS_BRANCH}
            git push origin ${STATUS_BRANCH}
            RESULT=$?
          done
